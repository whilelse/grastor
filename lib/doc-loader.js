// Generated by LiveScript 1.4.0
(function(){
  var fs, prelude, find, each, map, join, Repo, path, eachCommand, commandsForDocument, createRepoFromDocument, createIfNotExists, fileExists, randomString;
  fs = require('fs');
  prelude = require('prelude-ls');
  find = prelude.find, each = prelude.each, map = prelude.map, join = prelude.join;
  Repo = require('./repo');
  path = require('path');
  eachCommand = function(document, state, cmdCb, contCb){
    var isMainDoc, sourceFileName;
    isMainDoc = !state;
    state == null && (state = {
      loaded: {},
      root: null
    });
    if (state.loaded[document]) {
      return;
    }
    state.loaded[document] = true;
    sourceFileName = path.join(__dirname, "../documents/" + document + ".dylog");
    return createIfNotExists(sourceFileName, document, function(){
      var lines, i$, len$, line, wireCmd;
      lines = fs.readFileSync(sourceFileName).toString().split(/\r?\n/);
      for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
        line = lines[i$];
        if (line === '') {
          continue;
        }
        wireCmd = JSON.parse(line);
        if (wireCmd[0] === 'dep') {
          eachCommand(wireCmd[1].name, state, cmdCb, fn$);
        } else if (isMainDoc && wireCmd[0] === 'comp' && !state.root) {
          state.root = wireCmd[1].ni;
          cmdCb([
            'root', {
              ni: state.root
            }
          ]);
          cmdCb(wireCmd);
        } else {
          cmdCb(wireCmd);
        }
      }
      if (contCb) {
        return contCb();
      }
      function fn$(){}
    });
  };
  commandsForDocument = function(document, contCb){
    var commands, processCommand;
    commands = [];
    processCommand = function(wireCmd){
      var n;
      if (wireCmd[0] === 'undo') {
        n = wireCmd[1].val || 1;
        return commands.splice(commands.length - n, n);
      } else {
        return commands.push(wireCmd);
      }
    };
    return eachCommand(document, null, processCommand, function(){
      return contCb(commands);
    });
  };
  createRepoFromDocument = function(document, contCb){
    var repo;
    repo = new Repo();
    return commandsForDocument(document, function(commands){
      var i$, len$, wireCmd;
      for (i$ = 0, len$ = commands.length; i$ < len$; ++i$) {
        wireCmd = commands[i$];
        repo.processWireCmd(wireCmd);
      }
      return contCb(repo);
    });
  };
  createIfNotExists = function(path, document, contCb){
    var cmds, data;
    if (!fileExists(path)) {
      cmds = [
        [
          "dep", {
            "name": "lib"
          }
        ], [
          "dep", {
            "name": "testing"
          }
        ], [
          "dep", {
            "name": "web"
          }
        ], [
          "dep", {
            "name": "react"
          }
        ], [
          "comp", {
            "ri": "ac" + randomString(),
            "sni": "9",
            "rti": "8",
            "ni": "ac" + randomString(),
            "nti": "7",
            "name": document + "-workspace"
          }
        ]
      ];
      data = join('')(
      map(function(c){
        return JSON.stringify(c) + "\n";
      })(
      cmds));
      return fs.writeFile(path, data, function(err){
        if (err) {
          throw err;
        }
        return contCb();
      });
    } else {
      return contCb();
    }
  };
  fileExists = function(path){
    var e;
    try {
      fs.accessSync(path);
      return true;
    } catch (e$) {
      e = e$;
      return false;
    }
  };
  randomString = function(length){
    var chars, n, s, i$, i;
    length == null && (length = 10);
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    n = chars.length;
    s = '';
    for (i$ = 1; i$ <= length; ++i$) {
      i = i$;
      s += chars[Math.floor(Math.random() * n)];
    }
    return s;
  };
  module.exports = {
    eachCommand: eachCommand,
    commandsForDocument: commandsForDocument,
    createRepoFromDocument: createRepoFromDocument
  };
}).call(this);
